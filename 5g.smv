MODULE main

VAR


------------------- Environment and State variables --------------------
pcf_provides_address	:	boolean;	
udm_provides_characteristics	:	boolean;	
nrf_discover_requested	:	boolean;	
nrf_discover_completed	:	boolean;	
nrf_discover_good	:	boolean;	
has_local_CHF_charactaristics	:	boolean;	
incoming_pmf_init	:	boolean;	
has_charging_identifier	:	boolean;	

----------------- Sequence numbers -------------------

---------------- state for SMF state machine ----------------

smf_state	:
{
	chf_unselected,
	chf_selected
};
------------ Possible SMF actions ----------------

smf_action	:
{
	smf_select_CHF
};


DEFINE

-----------------SMF transitions --------------------
pdu_T1	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & pcf_provides_address
                    )	;
pdu_T2	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & !pcf_provides_address & udm_provides_characteristics
                    )	;
pdu_T3	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & !pcf_provides_address & !udm_provides_characteristics & !nrf_request_started
                    )	;
pdu_T4	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & !pcf_provides_address & !udm_provides_characteristics & nrf_request_started & !nrf_request_completed
                    )	;
pdu_T5	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & !pcf_provides_address & !udm_provides_characteristics & nrf_request_completed
                    )	;
pdu_T6	:=	 (smf_state = chf_unselected & 
                        incoming_pmf_init & !pcf_provides_address & !udm_provides_characteristics & !nrf_request_started & !nrf_request_completed
                    )	;

------------------- Noisy Channels --------------------

------------------- Adversary enabled or not --------------------


ASSIGN


------------------- Adversarial state machines --------------------


---------------SMF state machine ------------------

init(smf_state)	:=chf_unselected;

next(smf_state)	:=	 case

(pdu_T3 | pdu_T4 )	:	chf_unselected	;
(pdu_T1 | pdu_T2 | pdu_T5 | pdu_T6 )	:	chf_selected	;
TRUE	:	smf_state	;
esac	;


init(smf_action)	:= smf_null_action	;

next(smf_action)	:=	 case

(pdu_T1 | pdu_T2 | pdu_T3 | pdu_T4 | pdu_T5 | pdu_T6 )	:	smf_select_CHF	;
TRUE	:	smf_null_action	;
esac	;


init(has_charging_identifier)	:= FALSE	;

next(has_charging_identifier)	:=	 case
(pdu_T1 | pdu_T2 | pdu_T5 | pdu_T6 )	:	TRUE	;
TRUE	:	has_charging_identifier	;
esac	;


